# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.
#  For PyCharm Community Edition, use 'PyCharm CE' instead of 'PyCharm'.
.idea/

# VSCode
.vscode/
*.code-workspace

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Portfolio Management System specific
# Data directories
data/portfolios/*.json
data/cache/
data/temp/

# Export directories
exports/*.csv
exports/*.xlsx
exports/*.json
exports/*.pdf

# Log files
logs/
*.log

# Configuration files with sensitive data
.env.local
.env.production
config/secrets.yaml
config/api_keys.json

# Temporary files
temp/
tmp/
*.tmp
*.temp

# Backup files
*.bak
*.backup
*~

# Streamlit
.streamlit/secrets.toml

# Data files (large datasets)
data/historical/
data/bulk/
*.h5
*.hdf5
*.parquet

# Performance profiling
*.prof
*.profile
*.pstats

# Documentation builds
docs/build/
docs/_build/

# Package builds
build/
dist/
*.whl

# IDE and editor files
*.swp
*.swo
*~

# MacOS
.DS_Store

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Linux
*~

# Project specific temporary files
temp_import.csv
temp_export.*
debug_output.*

# API key files
api_keys.txt
secrets.json
credentials.yaml

# Large data files that shouldn't be in git
*.csv
*.xlsx
*.json
!requirements*.txt
!package.json
!tsconfig.json
!config/*.json
!tests/fixtures/*.json
!streamlit_app/config/*.json

# But keep example and template files
!examples/*.csv
!examples/*.xlsx
!examples/*.json
!templates/*.csv
!templates/*.xlsx
!templates/*.json

# Keep test fixture data
!tests/fixtures/*
!tests/data/*

# Ignore portfolio data files but keep structure
data/portfolios/*
!data/portfolios/.gitkeep
!data/portfolios/README.md

exports/*
!exports/.gitkeep
!exports/README.md

# Ignore cache but keep structure
cache/*
!cache/.gitkeep

# Jupyter notebook outputs
*.ipynb_checkpoints/

# pytest
.pytest_cache/
.coverage
htmlcov/
.tox/

# mypy
.mypy_cache/

# Profiling
*.prof
*.stats

# Local development
local_config.py
dev_settings.py

# Documentation
docs/site/
site/

# Node.js (for future React development)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# React build (for future phases)
/build
/dist

# Environment-specific files
.env.development
.env.staging
.env.production

# Database files (for future phases)
*.db
*.sqlite
*.sqlite3

# Redis dump (for future caching)
dump.rdb

# Monitoring and logging
monitoring/
metrics/